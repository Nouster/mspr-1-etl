name: Integration Test Workflow

on: [push, pull_request]

jobs:
  # le premier job est un build. On construit notre image Docker pour tester que le Dockerfile fonctionne
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Build Docker image
        # On construit l’image Docker en taguant :test, pour indiquer que c’est une image pour les tests CI
        run: docker build -t covid-mspr:test -f Dockerfile .

  # Ici, après avoir construit notre image, on lancer toute l'infra Docker dans ce second job.
  start-services:
    name: Run Docker Infrastructure
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/checkout@v2

      # On ne pousse pas nos variables d'environnement dans le repo. On les stocke donc dans les secrets de GitHub.
      - name: Create .env file from secrets
        run: |
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "DB_HOST=db" >> .env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
          echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> .env
      # Une fois le fichier .env créé avec les variables qui sont stockées dans les secrets de Github, 
      # on lance les services Docker. On utilise docker compose pour ça.
      - name: Start Docker Compose services
        run: docker compose up -d

      - name: Wait for PostgreSQL to be ready
        run: |
          echo "⏳ Waiting for PostgreSQL..."
          for i in {1..10}; do
            docker exec postgres_db pg_isready -U postgres && exit 0
            sleep 3
          done
          echo "PostgreSQL not ready" && exit 1

  # Le second job lance les tests. Il dépend du job build (il s’exécute que si le build est OK)
  test:
    name: Run Tests and Linter
    runs-on: ubuntu-latest
    needs: [build, start-services]
    env:
      DB_HOST: db
      DB_PORT: ${{ secrets.DB_PORT }}
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
    steps:
      - uses: actions/checkout@v2
      # On stocke les dépendances dans le cache pour éviter de les télécharger à chaque fois. Ça va accélerer
      #le workflow si on n'a pas changé les dépendances.
      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: pip install -r requirements.txt
      # Un linter qui va nous aider à respecter les conventions de codage mais qui ne va pas bloquer le workflow
      # si on a des erreurs. On améliorera ça tout petit à petit.
      - name: Run flake8 linter (non bloquant)
        run: |
          pip install flake8
          flake8 . || true

      - name: Run tests with coverage
        run: pytest --cov=ws --cov-report=term-missing

      - name: Discord Notification
        uses: emvakar/discord-notification-action@v2
        with:
          title: "Test Workflow"
          status: "success"
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
