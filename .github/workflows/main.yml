name: Integration Test Workflow

on: [push, pull_request]

jobs:
  # le premier job est un build. On construit notre image Docker pour tester que le Dockerfile fonctionne
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Build Docker image
        # On construit l‚Äôimage Docker en taguant :test, pour indiquer que c‚Äôest une image pour les tests CI
        run: docker build -t covid-mspr:test -f Dockerfile .

  # Ici, apr√®s avoir construit notre image, on lance toute l'infra Docker et les tests dans ce second job.
  start-services:
    name: Run Docker Infrastructure and Tests
    runs-on: ubuntu-latest
    needs: [build]

    steps:
      - uses: actions/checkout@v2

      # On ne pousse pas nos variables d'environnement dans le repo. On les stocke donc dans les secrets de GitHub.
      - name: Create .env file from secrets
        run: |
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "DB_HOST=db" >> .env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
          echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> .env
        working-directory: ${{ github.workspace }}
      # Une fois le fichier .env cr√©√© avec les variables qui sont stock√©es dans les secrets de Github, 
      # on lance les services Docker. On utilise docker compose pour √ßa.
      - name: Start Docker Compose services
        run: docker compose up -d
        working-directory: ${{ github.workspace }}


      - name: Wait for PostgreSQL to be ready
        run: |
          echo "‚è≥ Waiting for PostgreSQL..."
          for i in {1..10}; do
            docker exec postgres_db pg_isready -U postgres && exit 0
            sleep 3
          done
          echo "PostgreSQL not ready" && exit 1
      
      - name: Create database if not exists
        run: |
          echo "üì¶ Creating database if not exists..."
          docker exec postgres_db psql -U "${{ secrets.POSTGRES_USER }}" -d postgres -c \
          "DO \$\$ BEGIN IF NOT EXISTS (SELECT FROM pg_database WHERE datname = '${{ secrets.DB_NAME }}') THEN CREATE DATABASE \"${{ secrets.DB_NAME }}\"; END IF; END \$\$;"

      # Un linter qui va nous aider √† respecter les conventions de codage mais qui ne va pas bloquer le workflow
      # si on a des erreurs. On am√©liorera √ßa tout petit √† petit.
      - name: Run flake8 linter (non bloquant)
        run: |
          docker exec covid_mspr pip install flake8
          docker exec covid_mspr flake8 . || true

      - name: Run tests with coverage
        # important : on lance les tests dans le conteneur backend o√π l'app est configur√©e
        run: docker exec covid_mspr pytest --cov=ws --cov-report=term-missing

      - name: Discord Notification
        uses: emvakar/discord-notification-action@v2
        with:
          title: "Test Workflow"
          status: "success"
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
