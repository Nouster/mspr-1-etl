services:
  db:
    image: postgres:16
    container_name: postgres_db
    env_file:
      - .env
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - mynetwork

  backend:
    build: .
    container_name: covid_mspr
    depends_on:
      - db
    # Parfois, il ne semble pas récupérer les variables d'environnement du .env
    # On les redéfinit ici pour être sûr qu'elles soient bien prises en compte.
    env_file:
      - .env
    ports:
      - "8000:8000"
    networks:
      - mynetwork

  frontend-dev:
    build:
      # On part du répertoire front de l'application pour construire l'image
      # On utilise le Dockerfile de développement pour avoir un environnement de développement
      context: ./front
      dockerfile: Dockerfile.dev
    container_name: covid_front_dev
    # Ici, on va monter le dossier front de la mahine hôte dans le conteneur
    # pour pouvoir développer en direct sans avoir à reconstruire l'image à chaque fois
    # On monte aussi le dossier node_modules pour éviter les conflits avec l'hôte
    volumes:
      - ./front:/app
      # éviter les conflits avec node_modules de l'hôte
      - node_modules_dev:/app/node_modules
    ports:
      - "5173:5173"
    environment:
      - HOST=0.0.0.0
    networks:
      - mynetwork

  frontend:
    build:
      context: ./front
      dockerfile: Dockerfile
    container_name: covid_front
    ports:
      - "8080:80"
    networks:
      - mynetwork

  grafana:
    image: grafana/grafana:latest
    env_file:
      - .env
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - ./grafana/grafana.ini:/etc/grafana/grafana.ini
      - ./grafana/provisioning:/etc/grafana/provisioning
      - grafana_data:/var/lib/grafana
    entrypoint: ["/bin/sh", "-c", "/etc/grafana/provisioning/entrypoint.sh"]
    networks:
      - mynetwork
    depends_on:
      - db

volumes:
  postgres_data:
  grafana_data:
  node_modules_dev:

networks:
  mynetwork:
